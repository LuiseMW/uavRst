% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rs_classify.R
\name{calc_ext}
\alias{calc_ext}
\title{Convenient function to preprocess synthetic raster bands from a given RGB and optionally
extract the raster values on base of vector data for training purposes}
\usage{
calc_ext(calculateBands = FALSE, extractTrain = TRUE,
  prefixrunFN = "train_", prefixdemFN = "dem_",
  suffixTrainGeom = "TrainingArea", prefixTrainGeom = "index_",
  channels = c("red", "green", "blue"), hara = TRUE,
  haraType = c("simple", "advanced", "higher"), stat = TRUE, edge = TRUE,
  edgeType = c("gradient", "sobel", "touzi"), morpho = TRUE,
  morphoType = c("dilate", "erode", "opening", "closing"), rgbi = TRUE,
  indices = c("VVI", "VARI", "NDTI", "RI", "SCI", "BI", "SI", "HI", "TGI",
  "GLI", "NGRDI", "GRVI", "GLAI", "HUE", "CI", "SAT", "SHP"), RGBTrans = TRUE,
  colorSpaces = c("CIELab", "CMY", "Gray", "HCL", "HSB", "HSI", "Log", "XYZ",
  "YUV"), pardem = TRUE, demType = c("hillshade", "slope", "aspect", "TRI",
  "TPI", "Roughness", "SLOPE", "ASPECT", "C_GENE", "C_PROF", "C_PLAN", "C_TANG",
  "C_LONG", "C_CROS", "C_MINI", "C_MAXI", "C_TOTA", "C_ROTO", "MTPI"),
  morpho_method = 6, min_scale = 1, max_scale = 8, num_scale = 2,
  kernel = 3, currentDataFolder = NULL, currentIdxFolder = NULL,
  cleanTiffs = TRUE, giLinks = NULL)
}
\arguments{
\item{calculateBands}{logical. switch for set on calculation of syntheic bands and indices default = TRUE}

\item{extractTrain}{logical. switch for set on extract training data according to training geometries default = TRUE}

\item{prefixrunFN}{character. prefix of current run default = "train"}

\item{prefixdemFN}{character. prefix of current DEM default = "dem_"}

\item{suffixTrainGeom}{character. of training shape files e.g. index_2017_05_11_RGB_DEFS18_08_TrainingArea.shp default = "TrainingArea"}

\item{prefixTrainGeom}{character. of training image files e.g. index_2017_05_11_RGB_DEFS18_08_OrthoMosaic.tif default = "index_"}

\item{channels}{character. channels to be choosed options are c("red", "green", "blue")  default =  c("red", "green", "blue")}

\item{hara}{logical. switch for using  HaralickTextureExtraction default = TRUE. \cr}

\item{haraType}{character. hara options default is c("simple"), other  options are "advanced"  "higher" "all". NOTE:  "higher" takes a LOT of time}

\item{stat}{logical. switch for using statistic default = TRUE the stas are mean,variance, curtosis, skewness}

\item{edge}{logical. switch for using edge filtering default = TRUE}

\item{edgeType}{character. edge options default is c("gradient","sobel","touzi") all options are c("gradient","sobel","touzi")}

\item{morpho}{logical. switch for using morphological filtering default = TRUE}

\item{morphoType}{character. morphological options default is c("dilate","erode","opening","closing") all options are ("dilate","erode","opening","closing")}

\item{rgbi}{logical. switch for using rgbi index calcualtions default = TRUE}

\item{indices}{character. RGB indices default is c("VARI","NDTI","RI","CI","BI","SI","HI","TGI","GLI","NGRDI") all options are c("VVI","VARI","NDTI","RI","SCI","BI","SI","HI","TGI","GLI","NGRDI","GRVI","GLAI","HUE","CI","SAT","SHP")}

\item{RGBTrans}{logical. switch for using color space transforming default = TRUE}

\item{colorSpaces}{character.  RGB colorspace transforming to default c("CIELab","CMY","Gray","HCL","HSB","HSI","Log","XYZ","YUV")}

\item{pardem}{logical. switch for calculating dem parameter default = FALSE}

\item{demType}{character. ("hillshade","slope", "aspect","TRI","TPI","Roughness")}

\item{morpho_method}{numeric. saga morphometric method}

\item{min_scale}{numeric. in scale for multi scale TPI}

\item{max_scale}{numeric. max scale for multi scale TPI}

\item{num_scale}{numeric. number of scale for multi scale TPI}

\item{kernel}{numeric. size of kernel for filtering and statistics default is  3}

\item{currentDataFolder}{NULL folder to image (and shape) data}

\item{currentIdxFolder}{NULL folder for saving the results}

\item{cleanTiffs}{logical. TRUE logical switch for deleting the calculated tifs default is TRUE}

\item{giLinks}{list. GI tools cli pathes}
}
\description{
The calc_ext function covers step 1 of the  usecaseRGBClassify workflow for a random forest based classification of visible imagery.
}
\details{
(01) calc_ext() calculation of spectral indices, basic spatial statistics and textures and
              extracting of training values over all channels according to training data\cr\cr
(02) ffs_train() training using random forest and the forward feature selection method \cr
                     startTrain=TRUE\cr\cr
(03) calc_ext() with respect to the selected predictor variables you may calculate
              the requested channels for all rgb data that you want to predict.\cr\cr
(04) prediction startPredict=TRUE\cr\cr
}
\examples{
\dontrun{
require(uavRst)
devtools::install_github("gisma/link2GI", ref = "master")

#---> define environment and settings
projRootDir <- "~/temp7/GRASS7"

# create project structure and export global pathes
projRootDir<-tmpDir()
setwd(paste0(projRootDir,"run"))
link2GI::initProj(projRootDir = projRootDir,
                 projFolders = c("data/","data/training/","data/training/idx/",
                                 "output/","run/","fun/"),
                                 global = TRUE,
                                 path_prefix = "path_")
                                 
res <- calc_ext(calculateBands    = TRUE,
               extractTrain      = TRUE,
               prefixrunFN       = "traddel",
               suffixTrainGeom   = "TrainingArea",
               prefixTrainGeom   = "index_",
               indices           = c("VARI","NDTI","RI","CI","BI","SI","HI","TGI","GLI","NGRDI") ,
               channels          = c("red", "green", "blue"),
               hara              = FALSE,
               haraType          = c("simple","advanced","higher"),
               stat              = TRUE,
               edge              = TRUE,
               edgeType          = c("gradient","sobel","touzi"),
               morpho            = TRUE,
               morphoType        = c("dilate","erode","opening","closing"),
               kernel            = 3,
               currentDataFolder = path_data_training,
               currentIdxFolder  = path_data_training_idx)
}
}
